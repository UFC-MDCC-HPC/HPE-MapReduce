<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000130c90af458c2b30a93133bb7da7f7d13eecc8b64a3a2c5a7e5a59a13a306acc04f146dedb84abad2a0073f8b8c203cc52c78fad486ae0f7184d47f5fdfb21ea91fd94a801701c7a5ba7ab32eb8ce725d3c1ce9ebc94537f85b771310ad9d6bf410121324b8990cb5a0cf6c628d54452c6679e5bbbf3042dc27e7949dfa4f387" isAbstract="false" kind="Computation" name="CliqueReduceImpl" packagePath="br.ufc.mdcc.mapreduce.example.graph.clique.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="00240000048000009400000006020000002400005253413100040000110000007dacec7c168b46e9fa92e46244a75aac426de31d16a7577422bafadf3dafe1575e7203ee501ce6ac984a6c74afd6d897f29366d4b07773c4becaaa9fc0da1b05752f5bef608a2af6843c56d9afc21c8b8b369a2780c0f4891fc33b439e82d363b1e7bd58fbefd815821071406d09c7c2a56cfab06bfc0100eb4658e421cb1891" localRef="base" location="br.ufc.mdcc.mapreduce.example.graph.clique.CliqueReduce/CliqueReduce.hpe" name="CliqueReduce" package="br.ufc.mdcc.mapreduce.example.graph.clique" version="1.0.0.0">
        <visualDescription h="60" w="100" x="196" y="275">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009f0e4059bac90dbd773452b6ebbd798d7673d1cf0db03eb04b60b32098534b66525ece6ae96847b6a664f3d0a11033b983b98dbcf737dde8ae6cfbd8f09ba1ea62bf49d5da735b99512c0ba27fd2d2ee2ec11f6a143956f11bffba007421f7b46a10ee568ea7e23e0e62d2171f97f0efe4f5b4c9cf8eeb851ea528187c0bd382" localRef="output_value" location="br.ufc.mdcc.common.KVPair/KVPair.hpe" multiple="false" name="KVPair" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="198" x="557" y="201">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="value_type" varName="X###18897295"/>
          <parameter formFieldId="key_type" varName="OMK"/>
          <unitBounds parallel="false" uRef="kv_pair">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009f0e4059bac90dbd773452b6ebbd798d7673d1cf0db03eb04b60b32098534b66525ece6ae96847b6a664f3d0a11033b983b98dbcf737dde8ae6cfbd8f09ba1ea62bf49d5da735b99512c0ba27fd2d2ee2ec11f6a143956f11bffba007421f7b46a10ee568ea7e23e0e62d2171f97f0efe4f5b4c9cf8eeb851ea528187c0bd382" localRef="input_values" location="br.ufc.mdcc.common.KVPair/KVPair.hpe" multiple="false" name="KVPair" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="141" x="68" y="434">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="value_type" varName="X###14144635"/>
          <parameter formFieldId="key_type" varName="OMK"/>
          <unitBounds parallel="false" uRef="kv_pair">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <unitBounds parallel="false" uRef="reduce_function">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <interface iRef="ICliqueReduceImpl" nArgs="0">
      <slice isRef="orv_value_factory">
        <originRef cRef="orv_value_factory" iRef="IIterator"/>
        <visualDescription h="10" w="10" x="114" y="18"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.Integer;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.mapreduce.example.graph.clique.CliqueReduce;&#xA;&#xA;namespace br.ufc.mdcc.mapreduce.example.graph.clique.impl.CliqueReduceImpl { &#xA;&#x9;public abstract class BaseICliqueReduceImpl: Computation, BaseICliqueReduce{&#xA;&#xA;&#x9;&#x9;private IKVPair&lt;IInteger, IIterator&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>>> input_values = null;&#xA;&#x9;&#x9;public IKVPair&lt;IInteger, IIterator&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>>> Input_values {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.input_values == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.input_values = (IKVPair&lt;IInteger, IIterator&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>>>) Services.getPort(&quot;input_values&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.input_values;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IKVPair&lt;IInteger, IIterator&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>>> output_value = null;&#xA;&#x9;&#x9;public IKVPair&lt;IInteger, IIterator&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>>> Output_value {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output_value == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output_value = (IKVPair&lt;IInteger, IIterator&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>>>) Services.getPort(&quot;output_value&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output_value;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IIterator&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>> orv_value_factory = null;&#xA;&#x9;&#x9;protected IIterator&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>> Orv_value_factory {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.orv_value_factory == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.orv_value_factory = (IIterator&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>>) Services.getPort(&quot;orv_value_factory&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.orv_value_factory;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="BaseICliqueReduceImpl.cs" srcType="base" uri="br.ufc.mdcc.mapreduce.example.graph.clique.impl.CliqueReduceImpl/bin/1.0.0.0/BaseICliqueReduceImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.common.KVPair/bin/1.0.0.0/IKVPair.dll</dependency>
          <dependency>br.ufc.mdcc.common.Iterator/bin/1.0.0.0/IIterator.dll</dependency>
          <dependency>br.ufc.mdcc.common.Integer/bin/1.0.0.0/IInteger.dll</dependency>
          <dependency>br.ufc.mdcc.common.Data/bin/1.0.0.0/IData.dll</dependency>
          <dependency>br.ufc.mdcc.mapreduce.example.graph.clique.CliqueReduce/bin/1.0.0.0/BaseICliqueReduce.dll</dependency>
        </file>
        <file contents="using System;&#xA;using System.IO;&#xA;using System.Collections.Generic;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.mapreduce.example.graph.clique.CliqueReduce;&#xA;using br.ufc.mdcc.common.Integer;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;&#xA;namespace br.ufc.mdcc.mapreduce.example.graph.clique.impl.CliqueReduceImpl { &#xA;&#xA;&#x9;public class ICliqueReduceImpl : BaseICliqueReduceImpl, ICliqueReduce{&#xA;&#xA;&#x9;&#x9;public ICliqueReduceImpl() { &#xA;&#xA;&#x9;&#x9;} &#xA;&#x9;&#x9;private IDictionary&lt;int, IList&lt;IIntegerInstance>> bigCliques = null;&#xA;&#x9;&#x9;private int bigger=0;&#xA;&#x9;&#x9;private IDictionary&lt;int, IList&lt;IIntegerInstance>> iterators = new Dictionary&lt;int, IList&lt;IIntegerInstance>> ();&#xA;&#xA;&#x9;&#x9;public override void main() { &#xA;&#x9;&#x9;&#x9;//# Starting vars #&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger, IIterator&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>>> input_instance = (IKVPairInstance&lt;IInteger,IIterator&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>>>) Input_values.Instance;&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger, IIterator&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>>> output_instance = (IKVPairInstance&lt;IInteger, IIterator&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>>>)Output_value.newInstance ();//.Instance;&#xA;&#xA;&#x9;&#x9;&#x9;IIntegerInstance input_instance_key = (IIntegerInstance) input_instance.Key;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>> input_instance_value = (IIteratorInstance&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>>) input_instance.Value;&#xA;&#xA;&#x9;&#x9;&#x9;IIntegerInstance output_instance_key = (IIntegerInstance) output_instance.Key;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>> output_instance_value = (IIteratorInstance&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>>) output_instance.Value;&#xA;&#xA;&#x9;&#x9;&#x9;IDictionary&lt;int, IIntegerInstance> P = new Dictionary&lt;int, IIntegerInstance>();&#xA;&#x9;&#x9;&#x9;IDictionary&lt;int, IIntegerInstance> X = new Dictionary&lt;int, IIntegerInstance>();&#xA;&#x9;&#x9;&#x9;IDictionary&lt;int, IIteratorInstance&lt;IInteger>> dicValues = pivotKEY(input_instance_value, input_instance_key, P, X);//pivotKEY(Input_values.Value, Input_values.Key, P, X);&#xA;&#xA;&#x9;&#x9;&#x9;bigCliques = new Dictionary&lt;int, IList&lt;IIntegerInstance>>();&#xA;&#x9;&#x9;&#x9;bigger = 0;&#xA;&#xA;&#x9;&#x9;&#x9;IList&lt;IIntegerInstance> R = new List&lt;IIntegerInstance>();&#xA;&#x9;&#x9;&#x9;R.Add(input_instance_key);&#xA;&#x9;&#x9;&#x9;//#&#xA;&#xA;&#x9;&#x9;&#x9;bronKerboschAlgorithm(1, dicValues, P, R, X);//IIteratorInstance&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>> orv_value = (IIteratorInstance&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>>)Orv_value_factory.Instance;&#xA;&#xA;&#x9;&#x9;&#x9;IEnumerator&lt;int> iterator = bigCliques.Keys.GetEnumerator ();&#xA;&#x9;&#x9;&#x9;while (iterator.MoveNext ()) {&#xA;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger, IIterator&lt;IInteger>> kv = (IKVPairInstance&lt;IInteger, IIterator&lt;IInteger>>)Orv_value_factory.createItem ();&#xA;&#x9;&#x9;&#x9;&#x9;IIntegerInstance kv_key = ((IIntegerInstance)kv.Key);&#xA;&#x9;&#x9;&#x9;&#x9;IIteratorInstance&lt;IInteger> kv_value = ((IIteratorInstance&lt;IInteger>)kv.Value);&#xA;&#x9;&#x9;&#x9;&#x9;kv_key.Value = iterator.Current;&#xA;&#x9;&#x9;&#x9;&#x9;IEnumerator&lt;IIntegerInstance> enumerator = bigCliques [kv_key.Value].GetEnumerator();&#xA;&#x9;&#x9;&#x9;&#x9;while (enumerator.MoveNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;kv_value.put (enumerator.Current);&#xA;&#x9;&#x9;&#x9;&#x9;kv_value.finish ();&#xA;&#x9;&#x9;&#x9;&#x9;output_instance_value.put (kv);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;output_instance_value.finish(); //if (!output_value_instance_value.HasFinished) {//}&#xA;&#x9;&#x9;&#x9;output_instance_key = input_instance_key;//Output_value.Key = Input_values.Key; //output_value_instance.Value = output_value_instance_value;//Output_value.Value = outputIteratorValues;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IDictionary&lt;int, IIteratorInstance&lt;IInteger>> pivotKEY(IIteratorInstance&lt;IKVPair&lt;IInteger, IIterator&lt;IInteger>>> input_instance_value, IIntegerInstance pivot, IDictionary&lt;int, IIntegerInstance> P, IDictionary&lt;int, IIntegerInstance> X) {&#xA;&#x9;&#x9;&#x9;IDictionary&lt;int, IIteratorInstance&lt;IInteger>> res = new Dictionary&lt;int, IIteratorInstance&lt;IInteger>>();&#xA;&#x9;&#x9;&#x9;object object_kv;&#xA;&#x9;&#x9;&#x9;while(input_instance_value.fetch_next(out object_kv)){&#xA;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger, IIterator&lt;IInteger>> kv = (IKVPairInstance&lt;IInteger, IIterator&lt;IInteger>>) object_kv;&#xA;&#x9;&#x9;&#x9;&#x9;if (pivot.Value &lt; ((IIntegerInstance)kv.Key).Value)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;P.Add(((IIntegerInstance)kv.Key).Value, ((IIntegerInstance)kv.Key));&#xA;&#x9;&#x9;&#x9;&#x9;if (pivot.Value > ((IIntegerInstance)kv.Key).Value)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;X.Add(((IIntegerInstance)kv.Key).Value, ((IIntegerInstance)kv.Key));&#xA;&#x9;&#x9;&#x9;&#x9;res [((IIntegerInstance)kv.Key).Value] = ((IIteratorInstance&lt;IInteger>) kv.Value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return res;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public void bronKerboschAlgorithm(int SIZE, IDictionary&lt;int, IIteratorInstance&lt;IInteger>> dicValues, IDictionary&lt;int, IIntegerInstance> P, IList&lt;IIntegerInstance> R, IDictionary&lt;int, IIntegerInstance> X) {&#xA;&#x9;&#x9;&#x9;if (P.Count == 0 &amp;&amp; X.Count == 0) {&#xA;&#x9;&#x9;&#x9;&#x9;if (SIZE >= bigger) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (SIZE > bigger)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;bigCliques.Clear ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bigCliques [SIZE] = R;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bigger = SIZE;&#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;while (P.Count>0){&#xA;&#x9;&#x9;&#x9;&#x9;IEnumerator&lt;IIntegerInstance> iteratorPValues = P.Values.GetEnumerator();&#xA;&#x9;&#x9;&#x9;&#x9;iteratorPValues.MoveNext();&#xA;&#x9;&#x9;&#x9;&#x9;IIntegerInstance v = iteratorPValues.Current;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IDictionary&lt;int, IIntegerInstance> p = new Dictionary&lt;int, IIntegerInstance>();&#xA;&#x9;&#x9;&#x9;&#x9;IDictionary&lt;int, IIntegerInstance> x = new Dictionary&lt;int, IIntegerInstance>();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;IIntegerInstance> r = new List&lt;IIntegerInstance>(R);//CreateClone (R);//R.clone();&#xA;&#x9;&#x9;&#x9;&#x9;r.Add(v);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;IIntegerInstance> iterator;&#xA;&#x9;&#x9;&#x9;&#x9;if (!iterators.TryGetValue (v.Value, out iterator)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IIteratorInstance&lt;IInteger> value = dicValues [v.Value];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;iterator = new List&lt;IIntegerInstance> ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;intersect (ref iterator, value, P, X, ref p, ref x);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;iterators [v.Value] = iterator;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;intersect2 (iterator, P, X, ref p, ref x);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;bronKerboschAlgorithm(SIZE + 1, dicValues, p, r, x);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;P.Remove(v.Value);&#xA;&#x9;&#x9;&#x9;&#x9;X.Add(v.Value, v);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private void intersect(ref IList&lt;IIntegerInstance> neighbors2, IIteratorInstance&lt;IInteger> neighbors, IDictionary&lt;int, IIntegerInstance> P, IDictionary&lt;int, IIntegerInstance> X, ref IDictionary&lt;int, IIntegerInstance> p, ref IDictionary&lt;int, IIntegerInstance> x) {&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IInteger> iterator = neighbors;&#xA;&#x9;&#x9;&#x9;object o;&#xA;&#x9;&#x9;&#x9;while(iterator.fetch_next(out o)){&#xA;&#x9;&#x9;&#x9;&#x9;IIntegerInstance n = (IIntegerInstance)o;&#xA;&#x9;&#x9;&#x9;&#x9;if (P.ContainsKey(n.Value)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;p.Add(n.Value, n);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (X.ContainsKey(n.Value)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;x.Add(n.Value, n);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;neighbors2.Add (n);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private void intersect2(IList&lt;IIntegerInstance> neighbors, IDictionary&lt;int, IIntegerInstance> P, IDictionary&lt;int, IIntegerInstance> X, ref IDictionary&lt;int, IIntegerInstance> p, ref IDictionary&lt;int, IIntegerInstance> x) {&#xA;&#x9;&#x9;&#x9;IEnumerator&lt;IIntegerInstance> iterator = neighbors.GetEnumerator();&#xA;&#x9;&#x9;&#x9;while (iterator.MoveNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;IIntegerInstance n = iterator.Current;&#xA;&#x9;&#x9;&#x9;&#x9;if (P.ContainsKey(n.Value)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;p.Add(n.Value, n);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (X.ContainsKey(n.Value)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;x.Add(n.Value, n);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="ICliqueReduceImpl.cs" srcType="user" uri="br.ufc.mdcc.mapreduce.example.graph.clique.impl.CliqueReduceImpl/bin/1.0.0.0/ICliqueReduceImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.mapreduce.example.graph.clique.impl.CliqueReduceImpl/bin/1.0.0.0/BaseICliqueReduceImpl.dll</dependency>
          <dependency>br.ufc.mdcc.mapreduce.example.graph.clique.CliqueReduce/bin/1.0.0.0/ICliqueReduce.dll</dependency>
        </file>
      </sources>
      <visualDescription h="95" w="175" x="275" y="70">
        <color b="0" g="255" r="0"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit iRef="ICliqueReduceImpl" multiple="false" private="false" replica="0" uRef="reduce_function" visibleInterface="true">
      <super cRef="base" uRef="reduce_function"/>
      <visualDescription h="40" w="141" x="101" y="195"/>
    </unit>
  </componentInfo>
</component:component>