<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000175cab655ae31efd8bff89d385e10cc24d577d6d9d268f87f7ac2ecf64590f5c73284b1350405a062f51224cc3a7201fd8acac7a5ae5d69aec26fa35fd3747a389f77f45552352a9d419aa1a85559992518a93c96695d9e6a2ed9f478bc5e57cbacf5c4be6e87880ec64e28bada489e8ab1205b04aaa73b1b1314b2f73541294" isAbstract="false" kind="Data" name="IteratorImpl" packagePath="br.ufc.mdcc.common.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000a1d2d4f2ea9f962479f5322ab4d1b509fc8c95e67ad710c6bb2bc57522c8c96bb02c9f6dd000e20cf3098ef39cfffcb5af08f7fe86f5a1e1d0172e5578904f3160047cc21cbc9660df9c536444ce9e025fc3ca5bea6941da4aa0c6f38995d31933743052835857938e9f4726c55a065b54c9cd331a30361384b29cc34db7e285" localRef="base" location="br.ufc.mdcc.common.Iterator/Iterator.hpe" name="Iterator" package="br.ufc.mdcc.common" version="1.0.0.0">
        <visualDescription h="60" w="100" x="69" y="119">
          <color b="203" g="192" r="255"/>
        </visualDescription>
        <parameter formFieldId="item_type" varName="T"/>
        <unitBounds parallel="false" uRef="iterator">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000372d83aaa123858a97a353cd956eea59b526f3524a0b69ca51d23c6b5e50c14721ee4166d87e7e9f451ee95352730aef34e9cb849e6b5ea13671a9b755f9613ba945240437226e4e67762b01435f8463578849f4af6d6de0f843be1f2709a38edbeeb542483818886b9fcbf40c442db2d79060d42dd605ee7983b06ebf973d85" localRef="item_type" location="br.ufc.mdcc.common.Data/Data.hpe" multiple="false" name="Data" package="br.ufc.mdcc.common" exposed="false">
      <visualDescription h="60" w="100" x="94" y="356">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="item_type" direct="true" varName="T"/>
    <interface iRef="IIteratorImpl" nArgs="1">
      <slice isRef="item_factory">
        <originRef cRef="item_factory" iRef="IData"/>
        <visualDescription h="10" w="10" x="22" y="26"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;&#xA;namespace br.ufc.mdcc.common.impl.IteratorImpl { &#xA;&#xA;public abstract class BaseIIteratorImpl&lt;T>: DataStructure, BaseIIterator&lt;T>&#xA;where T:IData&#xA;{&#xA;&#xA;&#x9;&#x9;private T item_factory = default(T);&#xA;&#xA;&#x9;&#x9;protected T Item_factory {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.item_factory == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.item_factory = (T) Services.getPort(&quot;item_factory&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.item_factory;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;}&#xA;&#xA;}&#xA;" fileType="library" name="BaseIIteratorImpl.cs" srcType="base" uri="br.ufc.mdcc.common.impl.IteratorImpl/bin/1.0.0.0/BaseIIteratorImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.common.Data/bin/1.0.0.0/IData.dll</dependency>
          <dependency>br.ufc.mdcc.common.Iterator/bin/1.0.0.0/BaseIIterator.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using System.Collections.Generic;&#xA;using System.Threading;&#xA;using System.Collections.Concurrent;&#xA;&#xA;namespace br.ufc.mdcc.common.impl.IteratorImpl &#xA;{ &#xA;&#x9;&#xA;&#x9;public class IIteratorImpl&lt;T> : BaseIIteratorImpl&lt;T>, IIterator&lt;T>&#xA;&#x9;where T:IData&#xA;&#x9;{&#xA;&#x9;&#x9;public IIteratorImpl() { } &#xA;&#xA;&#x9;&#x9;override public void initialize()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;newInstance(); &#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public IIteratorInstance&lt;T> newIteratorInstance ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;return (IIteratorInstance&lt;T>) newInstance ();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public object newInstance ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;return this.Instance = new IIteratorInstanceImpl&lt;T>();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IIteratorInstance&lt;T> instance;&#xA;&#xA;&#x9;&#x9;public object Instance {&#xA;&#x9;&#x9;&#x9;get { return instance; }&#xA;&#x9;&#x9;&#x9;set { this.instance = (IIteratorInstance&lt;T>) value; }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public object createItem ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;return Item_factory.newInstance ();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;public class IIteratorInstanceImpl&lt;T> : IIteratorInstance&lt;T>&#xA;&#x9;&#x9;where T:IData&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;public IIteratorInstanceImpl() { } &#xA;&#xA;&#x9;&#x9;private ConcurrentQueue&lt;Option&lt;object>> items = new ConcurrentQueue&lt;Option&lt;object>>();&#xA;&#xA;&#x9;&#x9;readonly object not_empty = new object();&#xA;&#xA;&#x9;&#x9;public void put (object item)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;items.Enqueue(new Some&lt;object>(item));&#xA;&#xA;&#x9;&#x9;&#x9;lock (not_empty) { Monitor.Pulse(not_empty); }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public void putAll (IIteratorInstance&lt;T> items)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;object item;&#xA;&#x9;&#x9;&#x9;while (items.fetch_next(out item)) put(item);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public void finish ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.items.Enqueue(new None&lt;object>());&#xA;&#xA;&#x9;&#x9;&#x9;lock (not_empty) { Monitor.Pulse(not_empty); }&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public bool fetch_next (out object result)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;bool has_finished = false; //this.HasFinished;&#xA;&#xA;&#x9;&#x9;&#x9;result = null;&#xA;&#xA;&#x9;&#x9;&#x9;while (items.IsEmpty)&#xA;&#x9;&#x9;&#x9;&#x9;lock (not_empty) { Console.WriteLine (&quot;ITERATOR WAIT !!! &quot; + this.GetHashCode()); Monitor.Wait(not_empty); }&#xA;&#xA;&#x9;&#x9;&#x9;Option&lt;object> item;&#xA;&#x9;&#x9;&#x9;items.TryDequeue(out item);&#xA;&#xA;&#x9;&#x9;&#x9;if (item == null)&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;ITEM NULL - ITERATOR !!!!!! ****************************** &quot; + this.GetHashCode());&#xA;&#xA;&#x9;&#x9;&#x9;if (item.IsNone) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;has_finished = true;&#xA;&#x9;&#x9;    }&#xA;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;result = item.Value;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;&#x9;return !has_finished;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;&#xA;&#xA;// Used as return type from method&#xA;&#x9;public abstract class Option&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;// Could contain the value if Some, but not if None&#xA;&#x9;&#x9;public abstract T Value { get; }&#xA;&#xA;&#x9;&#x9;public abstract bool IsSome { get; }&#xA;&#xA;&#x9;&#x9;public abstract bool IsNone { get; }&#xA;&#x9;}&#xA;&#xA;&#x9;public sealed class Some&lt;T> : Option&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;private T value;&#xA;&#x9;&#x9;public Some(T value)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;// Setting Some to null, nullifies the purpose of Some/None&#xA;&#x9;&#x9;&#x9;if (value == null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;throw new System.ArgumentNullException(&quot;value&quot;, &quot;Some value was null, use None instead&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;this.value = value;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public override T Value { get { return value; } }&#xA;&#xA;&#x9;&#x9;public override bool IsSome { get { return true; } }&#xA;&#xA;&#x9;&#x9;public override bool IsNone { get { return false; } }&#xA;&#x9;}&#xA;&#xA;&#x9;public sealed class None&lt;T> : Option&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;public override T Value&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get { throw new System.NotSupportedException(&quot;There is no value&quot;); }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public override bool IsSome { get { return false; } }&#xA;&#xA;&#x9;&#x9;public override bool IsNone { get { return true; } }&#xA;&#x9;}&#xA;&#xA;}&#xA;" fileType="library" name="IIteratorImpl.cs" srcType="user" uri="br.ufc.mdcc.common.impl.IteratorImpl/bin/1.0.0.0/IIteratorImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.common.Data/bin/1.0.0.0/IData.dll</dependency>
          <dependency>%WORKSPACE/br.ufc.mdcc.common.impl.IteratorImpl/bin/1.0.0.0/BaseIIteratorImpl.dll</dependency>
          <dependency>br.ufc.mdcc.common.Iterator/bin/1.0.0.0/IIterator.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="135" x="276" y="136">
        <color b="0" g="165" r="255"/>
      </visualDescription>
      <parameter iname="IData" order="0" parid="item_type" uname="data" varid="T"/>
    </interface>
    <unit iRef="IIteratorImpl" multiple="false" private="false" replica="0" uRef="iterator" visibleInterface="true">
      <super cRef="base" uRef="iterator"/>
      <visualDescription h="40" w="80" x="320" y="450"/>
    </unit>
  </componentInfo>
</component:component>